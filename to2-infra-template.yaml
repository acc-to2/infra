AWSTemplateFormatVersion: '2010-09-09'
Description: to2 - CloudFormation stack

Resources:

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.22.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: to2-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.22.1.0/24
      AvailabilityZone: ap-northeast-2a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: to2-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.22.2.0/24
      AvailabilityZone: ap-northeast-2c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: to2-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.22.3.0/24
      AvailabilityZone: ap-northeast-2a
      Tags:
        - Key: Name
          Value: to2-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.22.4.0/24
      AvailabilityZone: ap-northeast-2c
      Tags:
        - Key: Name
          Value: to2-private-subnet-2
  # Route Table
  EC2RouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
          VpcId: "vpc-0c8493f4150a0df57"
          Tags: 
            - 
              Key: "Name"
              Value: "to2-private-rt"

  EC2RouteTable2:
      Type: "AWS::EC2::RouteTable"
      Properties:
          VpcId: "vpc-0c8493f4150a0df57"
          Tags: 
            - 
              Key: "Name"
              Value: "to2-public-rt"

  EC2RouteTable3:
      Type: "AWS::EC2::RouteTable"
      Properties:
          VpcId: "vpc-0c8493f4150a0df57"
          Tags: 
            - 
              Key: "Name"
              Value: "to2-vpc-rt"


  # Security Groups
  To2AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: to2-alb-sg

  To2EcsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Service SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # ALB -> ECS
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref To2AlbSG
        # VPC Default SG -> ECS
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt VPC.DefaultSecurityGroup
        # self
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref To2EcsSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: to2-ecs-sg

  To2BrokerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RabbitMQ Broker SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 61617
          ToPort: 61617
          SourceSecurityGroupId: !Ref To2EcsSG
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5672
          SourceSecurityGroupId: !Ref To2EcsSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: to2-broker-sg

  # ECR
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: to2-ecr-repo
      ImageTagMutability: MUTABLE
      EncryptionConfiguration:
        EncryptionType: AES256
      Tags:
        - Key: Name
          Value: to2-ecr-repo

  # ECS Cluster / Task / Service
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: to2-cluster
      Tags:
        - Key: Name
          Value: to2-cluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              - Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: to2-task-execution-role

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: to2-task
      Cpu: '1024' # 1 vCPU
      Memory: '3072' # 3 GiB
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskExecutionRole.Arn
      RuntimePlatform:
        OperatingSystemFamily: LINUX
        CpuArchitecture: X86_64
      ContainerDefinitions:
        - Name: to2-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/to2-ecr-repo:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/to2-task
              awslogs-region: ap-northeast-2
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: to2-task-def

  # ALB + Target Group + Listener
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: to2-alb
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref To2AlbSG
      Tags:
        - Key: Name
          Value: to2-alb

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: to2-target-group
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckEnabled: true
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: to2-target-group

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTPS
      Port: 443
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: arn:aws:acm:ap-northeast-2:416536687282:certificate/72a35085-77a4-4282-ba23-36e9638ea1ad
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS Service & Autoscaling
  FargateService:
    Type: AWS::ECS::Service
    DependsOn:
      - HttpsListener
      - HttpListener
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: to2-service
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref To2EcsSG
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: to2-container
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup

  ECSServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 4
      ResourceId: service/to2-cluster/to2-service
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: to2-ecs-target-tracking
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  # DynamoDB
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: to2-table
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Name
          Value: to2-dynamodb

  # Amazon MQ
  AmazonMQBroker:
    Type: AWS::AmazonMQ::Broker
    Properties:
      BrokerName: to2-rabbitmq-broker
      EngineType: RabbitMQ
      EngineVersion: 3.11.20
      HostInstanceType: mq.t3.micro
      PubliclyAccessible: false
      DeploymentMode: SINGLE_INSTANCE
      Users:
        - Username: admin
          Password: adminpassword123!
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref To2BrokerSG
      Tags:
        - Key: Name
          Value: to2-rabbitmq

  # Route 53
  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: to2-chat.com.
      HostedZoneTags:
        - Key: Name
          Value: to2-hosted-zone

  AlbAliasRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Name: api.to2-chat.com.
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      Comment: ALB alias record

  # Cognito
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: to2-user-pool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: nickname
          AttributeDataType: String
          Mutable: true
          Required: true
      UserPoolTags:
        - Name: to2-user-pool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: to2-user-pool-client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email openid
      CallbackURLs:
        - https://to2-chat.com/callback
      LogoutURLs:
        - https://to2-chat.com/logout

Outputs:
  VpcId:
    Value: !Ref VPC
  PublicSubnet1Id:
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Value: !Ref PublicSubnet2
  PrivateSubnet1Id:
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Value: !Ref PrivateSubnet2

  AlbSecurityGroupId:
    Value: !Ref To2AlbSG
  EcsSecurityGroupId:
    Value: !Ref To2EcsSG
  BrokerSecurityGroupId:
    Value: !Ref To2BrokerSG

  AlbDNSName:
    Description: ALB DNS
    Value: !GetAtt LoadBalancer.DNSName
  AlbHostedZoneId:
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
  TargetGroupArn:
    Value: !Ref TargetGroup
  EcsClusterArn:
    Value: !GetAtt ECSCluster.Arn
  EcsTaskDefinitionArn:
    Value: !Ref ECSTaskDefinition
  EcsServiceArn:
    Value: !GetAtt FargateService.Arn
  EcrRepositoryUri:
    Value: !GetAtt ECRRepository.RepositoryUri

  DynamoDbTableName:
    Value: !Ref DynamoDBTable
  RabbitMqBrokerId:
    Value: !Ref AmazonMQBroker
  RabbitMqBrokerArn:
    Value: !GetAtt AmazonMQBroker.Arn

  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Value: !Ref CognitoUserPoolClient
  HostedZoneId:
    Value: !Ref Route53HostedZone
  AlbAliasRecordName:
    Value: api.to2-chat.com